# -*- coding: utf-8 -*-
"""Proyecto00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wARCCII-sItILoC-SWri-gZrovZR7RA7
"""

pip install matplotlib astropy

import math
import matplotlib.pyplot as plt
from astropy.time import Time
from datetime import datetime, timedelta


M = 5.972e24
G = 398600.4405/M
a = 1.30262*6378
e = 0.16561
w = math.radians(15)
tp = Time("2025-03-31T00:00:00", format="isot", scale="utc")

def kepler(E, l, e):
    return E - e * math.sin(E) - l

def dif_kepler(E, e):
    return 1 - e * math.cos(E)

def solve_kepler(l, e, tol=1e-10, max_iter=100):
    E = l  # Primera aproximación
    for _ in range(max_iter):
        f = kepler(E, l, e)
        f_prime = dif_kepler(E, e)
        delta = -f / f_prime
        E += delta
        if abs(delta) < tol:
            return E
    raise RuntimeError("No se logró la convergencia en la Ecuación de Kepler.")


def anomalia_verdadera(E, e):
    tanf2 = math.sqrt((1 + e) / (1 - e)) * math.tan(E / 2)
    f = 2 * math.atan(tanf2)
    return f

def anomalia_media(t):
    delta_t = (t - tp).sec  # diferencia en segundos
    n = math.sqrt(G * M / a**3)
    l = n * delta_t
    return l % (2 * math.pi)

def position(t):
    t = Time(t, format='isot', scale='utc')
    l = anomalia_media(t)
    E = solve_kepler(l, e)
    f = anomalia_verdadera(E, e)
    r = a * (1 - e**2) / (1 + e * math.cos(f))
    phi = f + w
    x = r * math.cos(phi)
    y = r * math.sin(phi)
    return x, y

def orbit(steps=500):
    period = 2 * math.pi * math.sqrt(a**3 / (G * M))
    times = [tp + timedelta(seconds=i * period / steps) for i in range(steps)]
    coords = [position(t.isot) for t in times]
    x, y = zip(*coords)
    plt.figure(figsize=(6, 6))
    plt.plot(x, y, label='Órbita del satélite')
    plt.scatter([0], [0], color='blue')
    plt.axis('equal')
    plt.xlabel('x (m)')
    plt.ylabel('y (m)')
    plt.title('Órbita satelital')
    plt.legend()
    plt.grid(True)
    plt.show()

def distancia_radial(t):
    t = Time(t, format='isot', scale='utc')
    l = anomalia_media(t)
    E = solve_kepler(l, e)
    f = anomalia_verdadera(E, e)
    r = a * (1 - e**2) / (1 + e * math.cos(f))
    return r

def distancia_angular(t):
  t = Time(t, format='isot', scale='utc')
  l = anomalia_media(t)
  E = solve_kepler(l, e)
  f = anomalia_verdadera(E, e)
  phi=f+w
  return phi

def date(r0):
    f0=math.acos((((a*(1-e**2))/r0)-1)/e)
    E0=2*math.atan(math.sqrt((1 - e) / (1 + e)) * math.tan(f0 / 2))
    l0=E0-e*math.sin(E0)
    t0=l0*math.sqrt(a**3/(G*M))+tp
    return tp.isot

t= Time("2025-04-01T00:00:00", format="isot", scale="utc")
print(distancia_radial(t))
print(distancia_angular(t))
print(position(t))
orbit()
r0=1.5*6378
print(date(r0))